{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 119, "column": 0}, "map": {"version":3,"sources":["file://C%3A/ai-finance-platform-main/lib/inngest/client.js"],"sourcesContent":["import { Inngest } from \"inngest\";\n\nexport const inngest = new Inngest({\n  id: \"finance-platform\", // Unique app ID\n  name: \"Finance Platform\",\n  retryFunction: async (attempt) => ({\n    delay: Math.pow(2, attempt) * 1000, // Exponential backoff\n    maxAttempts: 2,\n  }),\n});\n"],"names":[],"mappings":";;;AAAA;;AAEO,MAAM,UAAU,IAAI,kIAAA,CAAA,UAAO,CAAC;IACjC,IAAI;IACJ,MAAM;IACN,eAAe,OAAO,UAAY,CAAC;YACjC,OAAO,KAAK,GAAG,CAAC,GAAG,WAAW;YAC9B,aAAa;QACf,CAAC;AACH"}},
    {"offset": {"line": 132, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 146, "column": 0}, "map": {"version":3,"sources":["file://C%3A/ai-finance-platform-main/lib/prisma.js"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\n\nexport const db = globalThis.prisma || new PrismaClient();\n\nif (process.env.NODE_ENV !== \"production\") {\n  globalThis.prisma = db;\n}\n\n// globalThis.prisma: This global variable ensures that the Prisma client instance is\n// reused across hot reloads during development. Without this, each time your application\n// reloads, a new instance of the Prisma client would be created, potentially leading\n// to connection issues.\n"],"names":[],"mappings":";;;AAAA;;AAEO,MAAM,KAAK,WAAW,MAAM,IAAI,IAAI,2GAAA,CAAA,eAAY;AAEvD,wCAA2C;IACzC,WAAW,MAAM,GAAG;AACtB,EAEA,qFAAqF;CACrF,yFAAyF;CACzF,qFAAqF;CACrF,wBAAwB"}},
    {"offset": {"line": 158, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 164, "column": 0}, "map": {"version":3,"sources":["file://C%3A/ai-finance-platform-main/emails/template.jsx"],"sourcesContent":["import {\n  Body,\n  Container,\n  Head,\n  Heading,\n  Html,\n  Preview,\n  Section,\n  Text,\n} from \"@react-email/components\";\n\n// Dummy data for preview\nconst PREVIEW_DATA = {\n  monthlyReport: {\n    userName: \"John Doe\",\n    type: \"monthly-report\",\n    data: {\n      month: \"December\",\n      stats: {\n        totalIncome: 5000,\n        totalExpenses: 3500,\n        byCategory: {\n          housing: 1500,\n          groceries: 600,\n          transportation: 400,\n          entertainment: 300,\n          utilities: 700,\n        },\n      },\n      insights: [\n        \"Your housing expenses are 43% of your total spending - consider reviewing your housing costs.\",\n        \"Great job keeping entertainment expenses under control this month!\",\n        \"Setting up automatic savings could help you save 20% more of your income.\",\n      ],\n    },\n  },\n  budgetAlert: {\n    userName: \"John Doe\",\n    type: \"budget-alert\",\n    data: {\n      percentageUsed: 85,\n      budgetAmount: 4000,\n      totalExpenses: 3400,\n    },\n  },\n};\n\nexport default function EmailTemplate({\n  userName = \"\",\n  type = \"monthly-report\",\n  data = {},\n}) {\n  if (type === \"monthly-report\") {\n    return (\n      <Html>\n        <Head />\n        <Preview>Your Monthly Financial Report</Preview>\n        <Body style={styles.body}>\n          <Container style={styles.container}>\n            <Heading style={styles.title}>Monthly Financial Report</Heading>\n\n            <Text style={styles.text}>Hello {userName},</Text>\n            <Text style={styles.text}>\n              Here&rsquo;s your financial summary for {data?.month}:\n            </Text>\n\n            {/* Main Stats */}\n            <Section style={styles.statsContainer}>\n              <div style={styles.stat}>\n                <Text style={styles.text}>Total Income</Text>\n                <Text style={styles.heading}>${data?.stats.totalIncome}</Text>\n              </div>\n              <div style={styles.stat}>\n                <Text style={styles.text}>Total Expenses</Text>\n                <Text style={styles.heading}>${data?.stats.totalExpenses}</Text>\n              </div>\n              <div style={styles.stat}>\n                <Text style={styles.text}>Net</Text>\n                <Text style={styles.heading}>\n                  ${data?.stats.totalIncome - data?.stats.totalExpenses}\n                </Text>\n              </div>\n            </Section>\n\n            {/* Category Breakdown */}\n            {data?.stats?.byCategory && (\n              <Section style={styles.section}>\n                <Heading style={styles.heading}>Expenses by Category</Heading>\n                {Object.entries(data?.stats.byCategory).map(\n                  ([category, amount]) => (\n                    <div key={category} style={styles.row}>\n                      <Text style={styles.text}>{category}</Text>\n                      <Text style={styles.text}>${amount}</Text>\n                    </div>\n                  )\n                )}\n              </Section>\n            )}\n\n            {/* AI Insights */}\n            {data?.insights && (\n              <Section style={styles.section}>\n                <Heading style={styles.heading}>Welth Insights</Heading>\n                {data.insights.map((insight, index) => (\n                  <Text key={index} style={styles.text}>\n                    â€¢ {insight}\n                  </Text>\n                ))}\n              </Section>\n            )}\n\n            <Text style={styles.footer}>\n              Thank you for using Welth. Keep tracking your finances for better\n              financial health!\n            </Text>\n          </Container>\n        </Body>\n      </Html>\n    );\n  }\n\n  if (type === \"budget-alert\") {\n    return (\n      <Html>\n        <Head />\n        <Preview>Budget Alert</Preview>\n        <Body style={styles.body}>\n          <Container style={styles.container}>\n            <Heading style={styles.title}>Budget Alert</Heading>\n            <Text style={styles.text}>Hello {userName},</Text>\n            <Text style={styles.text}>\n              You&rsquo;ve used {data?.percentageUsed.toFixed(1)}% of your\n              monthly budget.\n            </Text>\n            <Section style={styles.statsContainer}>\n              <div style={styles.stat}>\n                <Text style={styles.text}>Budget Amount</Text>\n                <Text style={styles.heading}>${data?.budgetAmount}</Text>\n              </div>\n              <div style={styles.stat}>\n                <Text style={styles.text}>Spent So Far</Text>\n                <Text style={styles.heading}>${data?.totalExpenses}</Text>\n              </div>\n              <div style={styles.stat}>\n                <Text style={styles.text}>Remaining</Text>\n                <Text style={styles.heading}>\n                  ${data?.budgetAmount - data?.totalExpenses}\n                </Text>\n              </div>\n            </Section>\n          </Container>\n        </Body>\n      </Html>\n    );\n  }\n}\n\nconst styles = {\n  body: {\n    backgroundColor: \"#f6f9fc\",\n    fontFamily: \"-apple-system, sans-serif\",\n  },\n  container: {\n    backgroundColor: \"#ffffff\",\n    margin: \"0 auto\",\n    padding: \"20px\",\n    borderRadius: \"5px\",\n    boxShadow: \"0 2px 4px rgba(0, 0, 0, 0.1)\",\n  },\n  title: {\n    color: \"#1f2937\",\n    fontSize: \"32px\",\n    fontWeight: \"bold\",\n    textAlign: \"center\",\n    margin: \"0 0 20px\",\n  },\n  heading: {\n    color: \"#1f2937\",\n    fontSize: \"20px\",\n    fontWeight: \"600\",\n    margin: \"0 0 16px\",\n  },\n  text: {\n    color: \"#4b5563\",\n    fontSize: \"16px\",\n    margin: \"0 0 16px\",\n  },\n  section: {\n    marginTop: \"32px\",\n    padding: \"20px\",\n    backgroundColor: \"#f9fafb\",\n    borderRadius: \"5px\",\n    border: \"1px solid #e5e7eb\",\n  },\n  statsContainer: {\n    margin: \"32px 0\",\n    padding: \"20px\",\n    backgroundColor: \"#f9fafb\",\n    borderRadius: \"5px\",\n  },\n  stat: {\n    marginBottom: \"16px\",\n    padding: \"12px\",\n    backgroundColor: \"#fff\",\n    borderRadius: \"4px\",\n    boxShadow: \"0 1px 2px rgba(0, 0, 0, 0.05)\",\n  },\n  row: {\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    padding: \"12px 0\",\n    borderBottom: \"1px solid #e5e7eb\",\n  },\n  footer: {\n    color: \"#6b7280\",\n    fontSize: \"14px\",\n    textAlign: \"center\",\n    marginTop: \"32px\",\n    paddingTop: \"16px\",\n    borderTop: \"1px solid #e5e7eb\",\n  },\n};\n"],"names":[],"mappings":";;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAWA,yBAAyB;AACzB,MAAM,eAAe;IACnB,eAAe;QACb,UAAU;QACV,MAAM;QACN,MAAM;YACJ,OAAO;YACP,OAAO;gBACL,aAAa;gBACb,eAAe;gBACf,YAAY;oBACV,SAAS;oBACT,WAAW;oBACX,gBAAgB;oBAChB,eAAe;oBACf,WAAW;gBACb;YACF;YACA,UAAU;gBACR;gBACA;gBACA;aACD;QACH;IACF;IACA,aAAa;QACX,UAAU;QACV,MAAM;QACN,MAAM;YACJ,gBAAgB;YAChB,cAAc;YACd,eAAe;QACjB;IACF;AACF;AAEe,SAAS,cAAc,EACpC,WAAW,EAAE,EACb,OAAO,gBAAgB,EACvB,OAAO,CAAC,CAAC,EACV;IACC,IAAI,SAAS,kBAAkB;QAC7B,qBACE,gPAAC,4JAAA,CAAA,OAAI;;8BACH,gPAAC,4JAAA,CAAA,OAAI;;;;;8BACL,gPAAC,+JAAA,CAAA,UAAO;8BAAC;;;;;;8BACT,gPAAC,4JAAA,CAAA,OAAI;oBAAC,OAAO,OAAO,IAAI;8BACtB,cAAA,gPAAC,iKAAA,CAAA,YAAS;wBAAC,OAAO,OAAO,SAAS;;0CAChC,gPAAC,+JAAA,CAAA,UAAO;gCAAC,OAAO,OAAO,KAAK;0CAAE;;;;;;0CAE9B,gPAAC,4JAAA,CAAA,OAAI;gCAAC,OAAO,OAAO,IAAI;;oCAAE;oCAAO;oCAAS;;;;;;;0CAC1C,gPAAC,4JAAA,CAAA,OAAI;gCAAC,OAAO,OAAO,IAAI;;oCAAE;oCACiB,MAAM;oCAAM;;;;;;;0CAIvD,gPAAC,+JAAA,CAAA,UAAO;gCAAC,OAAO,OAAO,cAAc;;kDACnC,gPAAC;wCAAI,OAAO,OAAO,IAAI;;0DACrB,gPAAC,4JAAA,CAAA,OAAI;gDAAC,OAAO,OAAO,IAAI;0DAAE;;;;;;0DAC1B,gPAAC,4JAAA,CAAA,OAAI;gDAAC,OAAO,OAAO,OAAO;;oDAAE;oDAAE,MAAM,MAAM;;;;;;;;;;;;;kDAE7C,gPAAC;wCAAI,OAAO,OAAO,IAAI;;0DACrB,gPAAC,4JAAA,CAAA,OAAI;gDAAC,OAAO,OAAO,IAAI;0DAAE;;;;;;0DAC1B,gPAAC,4JAAA,CAAA,OAAI;gDAAC,OAAO,OAAO,OAAO;;oDAAE;oDAAE,MAAM,MAAM;;;;;;;;;;;;;kDAE7C,gPAAC;wCAAI,OAAO,OAAO,IAAI;;0DACrB,gPAAC,4JAAA,CAAA,OAAI;gDAAC,OAAO,OAAO,IAAI;0DAAE;;;;;;0DAC1B,gPAAC,4JAAA,CAAA,OAAI;gDAAC,OAAO,OAAO,OAAO;;oDAAE;oDACzB,MAAM,MAAM,cAAc,MAAM,MAAM;;;;;;;;;;;;;;;;;;;4BAM7C,MAAM,OAAO,4BACZ,gPAAC,+JAAA,CAAA,UAAO;gCAAC,OAAO,OAAO,OAAO;;kDAC5B,gPAAC,+JAAA,CAAA,UAAO;wCAAC,OAAO,OAAO,OAAO;kDAAE;;;;;;oCAC/B,OAAO,OAAO,CAAC,MAAM,MAAM,YAAY,GAAG,CACzC,CAAC,CAAC,UAAU,OAAO,iBACjB,gPAAC;4CAAmB,OAAO,OAAO,GAAG;;8DACnC,gPAAC,4JAAA,CAAA,OAAI;oDAAC,OAAO,OAAO,IAAI;8DAAG;;;;;;8DAC3B,gPAAC,4JAAA,CAAA,OAAI;oDAAC,OAAO,OAAO,IAAI;;wDAAE;wDAAE;;;;;;;;2CAFpB;;;;;;;;;;;4BAUjB,MAAM,0BACL,gPAAC,+JAAA,CAAA,UAAO;gCAAC,OAAO,OAAO,OAAO;;kDAC5B,gPAAC,+JAAA,CAAA,UAAO;wCAAC,OAAO,OAAO,OAAO;kDAAE;;;;;;oCAC/B,KAAK,QAAQ,CAAC,GAAG,CAAC,CAAC,SAAS,sBAC3B,gPAAC,4JAAA,CAAA,OAAI;4CAAa,OAAO,OAAO,IAAI;;gDAAE;gDACjC;;2CADM;;;;;;;;;;;0CAOjB,gPAAC,4JAAA,CAAA,OAAI;gCAAC,OAAO,OAAO,MAAM;0CAAE;;;;;;;;;;;;;;;;;;;;;;;IAQtC;IAEA,IAAI,SAAS,gBAAgB;QAC3B,qBACE,gPAAC,4JAAA,CAAA,OAAI;;8BACH,gPAAC,4JAAA,CAAA,OAAI;;;;;8BACL,gPAAC,+JAAA,CAAA,UAAO;8BAAC;;;;;;8BACT,gPAAC,4JAAA,CAAA,OAAI;oBAAC,OAAO,OAAO,IAAI;8BACtB,cAAA,gPAAC,iKAAA,CAAA,YAAS;wBAAC,OAAO,OAAO,SAAS;;0CAChC,gPAAC,+JAAA,CAAA,UAAO;gCAAC,OAAO,OAAO,KAAK;0CAAE;;;;;;0CAC9B,gPAAC,4JAAA,CAAA,OAAI;gCAAC,OAAO,OAAO,IAAI;;oCAAE;oCAAO;oCAAS;;;;;;;0CAC1C,gPAAC,4JAAA,CAAA,OAAI;gCAAC,OAAO,OAAO,IAAI;;oCAAE;oCACL,MAAM,eAAe,QAAQ;oCAAG;;;;;;;0CAGrD,gPAAC,+JAAA,CAAA,UAAO;gCAAC,OAAO,OAAO,cAAc;;kDACnC,gPAAC;wCAAI,OAAO,OAAO,IAAI;;0DACrB,gPAAC,4JAAA,CAAA,OAAI;gDAAC,OAAO,OAAO,IAAI;0DAAE;;;;;;0DAC1B,gPAAC,4JAAA,CAAA,OAAI;gDAAC,OAAO,OAAO,OAAO;;oDAAE;oDAAE,MAAM;;;;;;;;;;;;;kDAEvC,gPAAC;wCAAI,OAAO,OAAO,IAAI;;0DACrB,gPAAC,4JAAA,CAAA,OAAI;gDAAC,OAAO,OAAO,IAAI;0DAAE;;;;;;0DAC1B,gPAAC,4JAAA,CAAA,OAAI;gDAAC,OAAO,OAAO,OAAO;;oDAAE;oDAAE,MAAM;;;;;;;;;;;;;kDAEvC,gPAAC;wCAAI,OAAO,OAAO,IAAI;;0DACrB,gPAAC,4JAAA,CAAA,OAAI;gDAAC,OAAO,OAAO,IAAI;0DAAE;;;;;;0DAC1B,gPAAC,4JAAA,CAAA,OAAI;gDAAC,OAAO,OAAO,OAAO;;oDAAE;oDACzB,MAAM,eAAe,MAAM;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAQ7C;AACF;AAEA,MAAM,SAAS;IACb,MAAM;QACJ,iBAAiB;QACjB,YAAY;IACd;IACA,WAAW;QACT,iBAAiB;QACjB,QAAQ;QACR,SAAS;QACT,cAAc;QACd,WAAW;IACb;IACA,OAAO;QACL,OAAO;QACP,UAAU;QACV,YAAY;QACZ,WAAW;QACX,QAAQ;IACV;IACA,SAAS;QACP,OAAO;QACP,UAAU;QACV,YAAY;QACZ,QAAQ;IACV;IACA,MAAM;QACJ,OAAO;QACP,UAAU;QACV,QAAQ;IACV;IACA,SAAS;QACP,WAAW;QACX,SAAS;QACT,iBAAiB;QACjB,cAAc;QACd,QAAQ;IACV;IACA,gBAAgB;QACd,QAAQ;QACR,SAAS;QACT,iBAAiB;QACjB,cAAc;IAChB;IACA,MAAM;QACJ,cAAc;QACd,SAAS;QACT,iBAAiB;QACjB,cAAc;QACd,WAAW;IACb;IACA,KAAK;QACH,SAAS;QACT,gBAAgB;QAChB,SAAS;QACT,cAAc;IAChB;IACA,QAAQ;QACN,OAAO;QACP,UAAU;QACV,WAAW;QACX,WAAW;QACX,YAAY;QACZ,WAAW;IACb;AACF"}},
    {"offset": {"line": 687, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 693, "column": 0}, "map": {"version":3,"sources":["file://C%3A/ai-finance-platform-main/actions/send-email.js"],"sourcesContent":["\"use server\";\n\nimport { Resend } from \"resend\";\n\nexport async function sendEmail({ to, subject, react }) {\n  const resend = new Resend(process.env.RESEND_API_KEY || \"\");\n\n  try {\n    const data = await resend.emails.send({\n      from: \"Finance App <onboarding@resend.dev>\",\n      to,\n      subject,\n      react,\n    });\n\n    return { success: true, data };\n  } catch (error) {\n    console.error(\"Failed to send email:\", error);\n    return { success: false, error };\n  }\n}\n"],"names":[],"mappings":";;;;;AAEA;;;;;AAEO,eAAe,UAAU,EAAE,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE;IACpD,MAAM,SAAS,IAAI,0IAAA,CAAA,SAAM,CAAC,QAAQ,GAAG,CAAC,cAAc,IAAI;IAExD,IAAI;QACF,MAAM,OAAO,MAAM,OAAO,MAAM,CAAC,IAAI,CAAC;YACpC,MAAM;YACN;YACA;YACA;QACF;QAEA,OAAO;YAAE,SAAS;YAAM;QAAK;IAC/B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,yBAAyB;QACvC,OAAO;YAAE,SAAS;YAAO;QAAM;IACjC;AACF;;;IAhBsB;;AAAA,iPAAA"}},
    {"offset": {"line": 729, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 735, "column": 0}, "map": {"version":3,"sources":["file://C%3A/ai-finance-platform-main/lib/inngest/function.js"],"sourcesContent":["import { inngest } from \"./client\";\nimport { db } from \"@/lib/prisma\";\nimport EmailTemplate from \"@/emails/template\";\nimport { sendEmail } from \"@/actions/send-email\";\nimport { GoogleGenerativeAI } from \"@google/generative-ai\";\n\n// 1. Recurring Transaction Processing with Throttling\nexport const processRecurringTransaction = inngest.createFunction(\n  {\n    id: \"process-recurring-transaction\",\n    name: \"Process Recurring Transaction\",\n    throttle: {\n      limit: 10, // Process 10 transactions\n      period: \"1m\", // per minute\n      key: \"event.data.userId\", // Throttle per user\n    },\n  },\n  { event: \"transaction.recurring.process\" },\n  async ({ event, step }) => {\n    // Validate event data\n    if (!event?.data?.transactionId || !event?.data?.userId) {\n      console.error(\"Invalid event data:\", event);\n      return { error: \"Missing required event data\" };\n    }\n\n    await step.run(\"process-transaction\", async () => {\n      const transaction = await db.transaction.findUnique({\n        where: {\n          id: event.data.transactionId,\n          userId: event.data.userId,\n        },\n        include: {\n          account: true,\n        },\n      });\n\n      if (!transaction || !isTransactionDue(transaction)) return;\n\n      // Create new transaction and update account balance in a transaction\n      await db.$transaction(async (tx) => {\n        // Create new transaction\n        await tx.transaction.create({\n          data: {\n            type: transaction.type,\n            amount: transaction.amount,\n            description: `${transaction.description} (Recurring)`,\n            date: new Date(),\n            category: transaction.category,\n            userId: transaction.userId,\n            accountId: transaction.accountId,\n            isRecurring: false,\n          },\n        });\n\n        // Update account balance\n        const balanceChange =\n          transaction.type === \"EXPENSE\"\n            ? -transaction.amount.toNumber()\n            : transaction.amount.toNumber();\n\n        await tx.account.update({\n          where: { id: transaction.accountId },\n          data: { balance: { increment: balanceChange } },\n        });\n\n        // Update last processed date and next recurring date\n        await tx.transaction.update({\n          where: { id: transaction.id },\n          data: {\n            lastProcessed: new Date(),\n            nextRecurringDate: calculateNextRecurringDate(\n              new Date(),\n              transaction.recurringInterval\n            ),\n          },\n        });\n      });\n    });\n  }\n);\n\n// Trigger recurring transactions with batching\nexport const triggerRecurringTransactions = inngest.createFunction(\n  {\n    id: \"trigger-recurring-transactions\", // Unique ID,\n    name: \"Trigger Recurring Transactions\",\n  },\n  { cron: \"0 0 * * *\" }, // Daily at midnight\n  async ({ step }) => {\n    const recurringTransactions = await step.run(\n      \"fetch-recurring-transactions\",\n      async () => {\n        return await db.transaction.findMany({\n          where: {\n            isRecurring: true,\n            status: \"COMPLETED\",\n            OR: [\n              { lastProcessed: null },\n              {\n                nextRecurringDate: {\n                  lte: new Date(),\n                },\n              },\n            ],\n          },\n        });\n      }\n    );\n\n    // Send event for each recurring transaction in batches\n    if (recurringTransactions.length > 0) {\n      const events = recurringTransactions.map((transaction) => ({\n        name: \"transaction.recurring.process\",\n        data: {\n          transactionId: transaction.id,\n          userId: transaction.userId,\n        },\n      }));\n\n      // Send events directly using inngest.send()\n      await inngest.send(events);\n    }\n\n    return { triggered: recurringTransactions.length };\n  }\n);\n\n// 2. Monthly Report Generation\nasync function generateFinancialInsights(stats, month) {\n  const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);\n  const model = genAI.getGenerativeModel({ model: \"gemini-1.5-flash\" });\n\n  const prompt = `\n    Analyze this financial data and provide 3 concise, actionable insights.\n    Focus on spending patterns and practical advice.\n    Keep it friendly and conversational.\n\n    Financial Data for ${month}:\n    - Total Income: $${stats.totalIncome}\n    - Total Expenses: $${stats.totalExpenses}\n    - Net Income: $${stats.totalIncome - stats.totalExpenses}\n    - Expense Categories: ${Object.entries(stats.byCategory)\n      .map(([category, amount]) => `${category}: $${amount}`)\n      .join(\", \")}\n\n    Format the response as a JSON array of strings, like this:\n    [\"insight 1\", \"insight 2\", \"insight 3\"]\n  `;\n\n  try {\n    const result = await model.generateContent(prompt);\n    const response = result.response;\n    const text = response.text();\n    const cleanedText = text.replace(/```(?:json)?\\n?/g, \"\").trim();\n\n    return JSON.parse(cleanedText);\n  } catch (error) {\n    console.error(\"Error generating insights:\", error);\n    return [\n      \"Your highest expense category this month might need attention.\",\n      \"Consider setting up a budget for better financial management.\",\n      \"Track your recurring expenses to identify potential savings.\",\n    ];\n  }\n}\n\nexport const generateMonthlyReports = inngest.createFunction(\n  {\n    id: \"generate-monthly-reports\",\n    name: \"Generate Monthly Reports\",\n  },\n  { cron: \"0 0 1 * *\" }, // First day of each month\n  async ({ step }) => {\n    const users = await step.run(\"fetch-users\", async () => {\n      return await db.user.findMany({\n        include: { accounts: true },\n      });\n    });\n\n    for (const user of users) {\n      await step.run(`generate-report-${user.id}`, async () => {\n        const lastMonth = new Date();\n        lastMonth.setMonth(lastMonth.getMonth() - 1);\n\n        const stats = await getMonthlyStats(user.id, lastMonth);\n        const monthName = lastMonth.toLocaleString(\"default\", {\n          month: \"long\",\n        });\n\n        // Generate AI insights\n        const insights = await generateFinancialInsights(stats, monthName);\n\n        await sendEmail({\n          to: user.email,\n          subject: `Your Monthly Financial Report - ${monthName}`,\n          react: EmailTemplate({\n            userName: user.name,\n            type: \"monthly-report\",\n            data: {\n              stats,\n              month: monthName,\n              insights,\n            },\n          }),\n        });\n      });\n    }\n\n    return { processed: users.length };\n  }\n);\n\n// 3. Budget Alerts with Event Batching\nexport const checkBudgetAlerts = inngest.createFunction(\n  { name: \"Check Budget Alerts\" },\n  { cron: \"0 */6 * * *\" }, // Every 6 hours\n  async ({ step }) => {\n    const budgets = await step.run(\"fetch-budgets\", async () => {\n      return await db.budget.findMany({\n        include: {\n          user: {\n            include: {\n              accounts: {\n                where: {\n                  isDefault: true,\n                },\n              },\n            },\n          },\n        },\n      });\n    });\n\n    for (const budget of budgets) {\n      const defaultAccount = budget.user.accounts[0];\n      if (!defaultAccount) continue; // Skip if no default account\n\n      await step.run(`check-budget-${budget.id}`, async () => {\n        const startDate = new Date();\n        startDate.setDate(1); // Start of current month\n\n        // Calculate total expenses for the default account only\n        const expenses = await db.transaction.aggregate({\n          where: {\n            userId: budget.userId,\n            accountId: defaultAccount.id, // Only consider default account\n            type: \"EXPENSE\",\n            date: {\n              gte: startDate,\n            },\n          },\n          _sum: {\n            amount: true,\n          },\n        });\n\n        const totalExpenses = expenses._sum.amount?.toNumber() || 0;\n        const budgetAmount = budget.amount;\n        const percentageUsed = (totalExpenses / budgetAmount) * 100;\n\n        // Check if we should send an alert\n        if (\n          percentageUsed >= 80 && // Default threshold of 80%\n          (!budget.lastAlertSent ||\n            isNewMonth(new Date(budget.lastAlertSent), new Date()))\n        ) {\n          await sendEmail({\n            to: budget.user.email,\n            subject: `Budget Alert for ${defaultAccount.name}`,\n            react: EmailTemplate({\n              userName: budget.user.name,\n              type: \"budget-alert\",\n              data: {\n                percentageUsed,\n                budgetAmount: parseInt(budgetAmount).toFixed(1),\n                totalExpenses: parseInt(totalExpenses).toFixed(1),\n                accountName: defaultAccount.name,\n              },\n            }),\n          });\n\n          // Update last alert sent\n          await db.budget.update({\n            where: { id: budget.id },\n            data: { lastAlertSent: new Date() },\n          });\n        }\n      });\n    }\n  }\n);\n\nfunction isNewMonth(lastAlertDate, currentDate) {\n  return (\n    lastAlertDate.getMonth() !== currentDate.getMonth() ||\n    lastAlertDate.getFullYear() !== currentDate.getFullYear()\n  );\n}\n\n// Utility functions\nfunction isTransactionDue(transaction) {\n  // If no lastProcessed date, transaction is due\n  if (!transaction.lastProcessed) return true;\n\n  const today = new Date();\n  const nextDue = new Date(transaction.nextRecurringDate);\n\n  // Compare with nextDue date\n  return nextDue <= today;\n}\n\nfunction calculateNextRecurringDate(date, interval) {\n  const next = new Date(date);\n  switch (interval) {\n    case \"DAILY\":\n      next.setDate(next.getDate() + 1);\n      break;\n    case \"WEEKLY\":\n      next.setDate(next.getDate() + 7);\n      break;\n    case \"MONTHLY\":\n      next.setMonth(next.getMonth() + 1);\n      break;\n    case \"YEARLY\":\n      next.setFullYear(next.getFullYear() + 1);\n      break;\n  }\n  return next;\n}\n\nasync function getMonthlyStats(userId, month) {\n  const startDate = new Date(month.getFullYear(), month.getMonth(), 1);\n  const endDate = new Date(month.getFullYear(), month.getMonth() + 1, 0);\n\n  const transactions = await db.transaction.findMany({\n    where: {\n      userId,\n      date: {\n        gte: startDate,\n        lte: endDate,\n      },\n    },\n  });\n\n  return transactions.reduce(\n    (stats, t) => {\n      const amount = t.amount.toNumber();\n      if (t.type === \"EXPENSE\") {\n        stats.totalExpenses += amount;\n        stats.byCategory[t.category] =\n          (stats.byCategory[t.category] || 0) + amount;\n      } else {\n        stats.totalIncome += amount;\n      }\n      return stats;\n    },\n    {\n      totalExpenses: 0,\n      totalIncome: 0,\n      byCategory: {},\n      transactionCount: transactions.length,\n    }\n  );\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 1068, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1074, "column": 0}, "map": {"version":3,"sources":["file://C%3A/ai-finance-platform-main/app/api/inngest/route.js"],"sourcesContent":["import { serve } from \"inngest/next\";\n\nimport { inngest } from \"@/lib/inngest/client\";\nimport {\n  checkBudgetAlerts,\n  generateMonthlyReports,\n  processRecurringTransaction,\n  triggerRecurringTransactions,\n} from \"@/lib/inngest/function\";\n\nexport const { GET, POST, PUT } = serve({\n  client: inngest,\n  functions: [\n    processRecurringTransaction,\n    triggerRecurringTransactions,\n    generateMonthlyReports,\n    checkBudgetAlerts,\n  ],\n});\n"],"names":[],"mappings":";;;;;AAAA;AAEA;AACA;;;;AAOO,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,CAAA,GAAA,iIAAA,CAAA,QAAK,AAAD,EAAE;IACtC,QAAQ,0HAAA,CAAA,UAAO;IACf,WAAW;QACT,4HAAA,CAAA,8BAA2B;QAC3B,4HAAA,CAAA,+BAA4B;QAC5B,4HAAA,CAAA,yBAAsB;QACtB,4HAAA,CAAA,oBAAiB;KAClB;AACH"}},
    {"offset": {"line": 1094, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}